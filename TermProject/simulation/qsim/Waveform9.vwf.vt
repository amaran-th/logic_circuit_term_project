// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 00:53:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mx_4bit_8x1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mx_4bit_8x1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] com1;
reg [3:0] com2;
reg [3:0] com3;
reg [3:0] com4;
reg [3:0] com5;
reg [3:0] com6;
reg [3:0] com7;
reg [3:0] com8;
reg [2:0] selector;
// wires                                               
wire [3:0] dout;

// assign statements (if any)                          
mx_4bit_8x1 i1 (
// port map - connection between master ports and signals/registers   
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.dout(dout),
	.selector(selector)
);
initial 
begin 
#1000000 $finish;
end 
// com1[ 3 ]
initial
begin
	com1[3] = 1'b0;
end 
// com1[ 2 ]
initial
begin
	com1[2] = 1'b0;
end 
// com1[ 1 ]
initial
begin
	com1[1] = 1'b0;
end 
// com1[ 0 ]
initial
begin
	com1[0] = 1'b1;
end 
// com2[ 3 ]
initial
begin
	com2[3] = 1'b0;
end 
// com2[ 2 ]
initial
begin
	com2[2] = 1'b0;
end 
// com2[ 1 ]
initial
begin
	com2[1] = 1'b1;
end 
// com2[ 0 ]
initial
begin
	com2[0] = 1'b0;
end 
// com3[ 3 ]
initial
begin
	com3[3] = 1'b0;
end 
// com3[ 2 ]
initial
begin
	com3[2] = 1'b0;
end 
// com3[ 1 ]
initial
begin
	com3[1] = 1'b1;
end 
// com3[ 0 ]
initial
begin
	com3[0] = 1'b1;
end 
// com4[ 3 ]
initial
begin
	com4[3] = 1'b0;
end 
// com4[ 2 ]
initial
begin
	com4[2] = 1'b1;
end 
// com4[ 1 ]
initial
begin
	com4[1] = 1'b0;
end 
// com4[ 0 ]
initial
begin
	com4[0] = 1'b0;
end 
// com5[ 3 ]
initial
begin
	com5[3] = 1'b0;
end 
// com5[ 2 ]
initial
begin
	com5[2] = 1'b1;
end 
// com5[ 1 ]
initial
begin
	com5[1] = 1'b0;
end 
// com5[ 0 ]
initial
begin
	com5[0] = 1'b1;
end 
// com6[ 3 ]
initial
begin
	com6[3] = 1'b0;
end 
// com6[ 2 ]
initial
begin
	com6[2] = 1'b1;
end 
// com6[ 1 ]
initial
begin
	com6[1] = 1'b1;
end 
// com6[ 0 ]
initial
begin
	com6[0] = 1'b0;
end 
// com7[ 3 ]
initial
begin
	com7[3] = 1'b0;
end 
// com7[ 2 ]
initial
begin
	com7[2] = 1'b1;
end 
// com7[ 1 ]
initial
begin
	com7[1] = 1'b1;
end 
// com7[ 0 ]
initial
begin
	com7[0] = 1'b1;
end 
// com8[ 3 ]
initial
begin
	com8[3] = 1'b1;
end 
// com8[ 2 ]
initial
begin
	com8[2] = 1'b0;
end 
// com8[ 1 ]
initial
begin
	com8[1] = 1'b0;
end 
// com8[ 0 ]
initial
begin
	com8[0] = 1'b0;
end 
// selector[ 2 ]
initial
begin
	repeat(12)
	begin
		selector[2] = 1'b0;
		selector[2] = #40000 1'b1;
		# 40000;
	end
	selector[2] = 1'b0;
end 
// selector[ 1 ]
always
begin
	selector[1] = 1'b0;
	selector[1] = #20000 1'b1;
	#20000;
end 
// selector[ 0 ]
always
begin
	selector[0] = 1'b0;
	selector[0] = #10000 1'b1;
	#10000;
end 
endmodule

