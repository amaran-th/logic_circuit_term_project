// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2021 17:24:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cmp_answer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cmp_answer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] in1;
reg [3:0] in2;
reg [3:0] in3;
reg [3:0] in4;
reg [3:0] in5;
reg [3:0] in6;
reg [3:0] rand1;
reg [3:0] rand2;
reg [3:0] rand3;
reg [3:0] rand4;
reg [3:0] rand5;
reg [3:0] rand6;
reg [3:0] score;
reg [1:0] step;
// wires                                               
wire [3:0] ascore;
wire [3:0] cscore;
wire isE1;
wire isE2;
wire isE3;
wire isE4;
wire isE5;
wire isE6;

// assign statements (if any)                          
cmp_answer i1 (
// port map - connection between master ports and signals/registers   
	.ascore(ascore),
	.cscore(cscore),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.isE1(isE1),
	.isE2(isE2),
	.isE3(isE3),
	.isE4(isE4),
	.isE5(isE5),
	.isE6(isE6),
	.rand1(rand1),
	.rand2(rand2),
	.rand3(rand3),
	.rand4(rand4),
	.rand5(rand5),
	.rand6(rand6),
	.score(score),
	.step(step)
);
initial 
begin 
#1000000 $finish;
end 
// step[ 1 ]
initial
begin
	step[1] = 1'b1;
end 
// step[ 0 ]
initial
begin
	step[0] = 1'b1;
end 
// score[ 3 ]
initial
begin
	score[3] = 1'b0;
end 
// score[ 2 ]
initial
begin
	score[2] = 1'b0;
	score[2] = #330000 1'b1;
end 
// score[ 1 ]
initial
begin
	score[1] = 1'b0;
end 
// score[ 0 ]
initial
begin
	score[0] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b1;
	in1[3] = #330000 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
	in1[2] = #330000 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b1;
	in1[1] = #330000 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b1;
	in1[0] = #330000 1'b0;
end 
// rand1[ 3 ]
initial
begin
	rand1[3] = 1'b1;
	rand1[3] = #330000 1'b0;
end 
// rand1[ 2 ]
initial
begin
	rand1[2] = 1'b1;
	rand1[2] = #330000 1'b0;
end 
// rand1[ 1 ]
initial
begin
	rand1[1] = 1'b1;
	rand1[1] = #330000 1'b0;
end 
// rand1[ 0 ]
initial
begin
	rand1[0] = 1'b1;
	rand1[0] = #330000 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b0;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 
// rand2[ 3 ]
initial
begin
	rand2[3] = 1'b1;
	rand2[3] = #330000 1'b0;
end 
// rand2[ 2 ]
initial
begin
	rand2[2] = 1'b1;
	rand2[2] = #330000 1'b0;
end 
// rand2[ 1 ]
initial
begin
	rand2[1] = 1'b1;
	rand2[1] = #330000 1'b0;
end 
// rand2[ 0 ]
initial
begin
	rand2[0] = 1'b1;
	rand2[0] = #330000 1'b0;
end 
// in3[ 3 ]
initial
begin
	in3[3] = 1'b1;
	in3[3] = #330000 1'b0;
end 
// in3[ 2 ]
initial
begin
	in3[2] = 1'b1;
	in3[2] = #330000 1'b0;
end 
// in3[ 1 ]
initial
begin
	in3[1] = 1'b1;
	in3[1] = #330000 1'b0;
end 
// in3[ 0 ]
initial
begin
	in3[0] = 1'b1;
	in3[0] = #330000 1'b0;
end 
// rand3[ 3 ]
initial
begin
	rand3[3] = 1'b0;
end 
// rand3[ 2 ]
initial
begin
	rand3[2] = 1'b0;
end 
// rand3[ 1 ]
initial
begin
	rand3[1] = 1'b0;
end 
// rand3[ 0 ]
initial
begin
	rand3[0] = 1'b0;
end 
// in4[ 3 ]
initial
begin
	in4[3] = 1'b0;
end 
// in4[ 2 ]
initial
begin
	in4[2] = 1'b0;
end 
// in4[ 1 ]
initial
begin
	in4[1] = 1'b0;
end 
// in4[ 0 ]
initial
begin
	in4[0] = 1'b0;
end 
// rand4[ 3 ]
initial
begin
	rand4[3] = 1'b0;
end 
// rand4[ 2 ]
initial
begin
	rand4[2] = 1'b0;
end 
// rand4[ 1 ]
initial
begin
	rand4[1] = 1'b0;
end 
// rand4[ 0 ]
initial
begin
	rand4[0] = 1'b0;
end 
// in5[ 3 ]
initial
begin
	in5[3] = 1'b0;
end 
// in5[ 2 ]
initial
begin
	in5[2] = 1'b0;
end 
// in5[ 1 ]
initial
begin
	in5[1] = 1'b0;
end 
// in5[ 0 ]
initial
begin
	in5[0] = 1'b0;
end 
// rand5[ 3 ]
initial
begin
	rand5[3] = 1'b0;
end 
// rand5[ 2 ]
initial
begin
	rand5[2] = 1'b0;
end 
// rand5[ 1 ]
initial
begin
	rand5[1] = 1'b0;
end 
// rand5[ 0 ]
initial
begin
	rand5[0] = 1'b0;
end 
// in6[ 3 ]
initial
begin
	in6[3] = 1'b1;
	in6[3] = #330000 1'b0;
end 
// in6[ 2 ]
initial
begin
	in6[2] = 1'b1;
	in6[2] = #330000 1'b0;
end 
// in6[ 1 ]
initial
begin
	in6[1] = 1'b1;
	in6[1] = #330000 1'b0;
end 
// in6[ 0 ]
initial
begin
	in6[0] = 1'b1;
	in6[0] = #330000 1'b0;
end 
// rand6[ 3 ]
initial
begin
	rand6[3] = 1'b1;
	rand6[3] = #330000 1'b0;
end 
// rand6[ 2 ]
initial
begin
	rand6[2] = 1'b1;
	rand6[2] = #330000 1'b0;
end 
// rand6[ 1 ]
initial
begin
	rand6[1] = 1'b1;
	rand6[1] = #330000 1'b0;
end 
// rand6[ 0 ]
initial
begin
	rand6[0] = 1'b1;
	rand6[0] = #330000 1'b0;
end 
endmodule

